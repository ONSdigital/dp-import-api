// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-import-api/datastore"
	"github.com/ONSdigital/dp-import-api/models"
	"sync"
)

var (
	lockDataStorerMockAddJob          sync.RWMutex
	lockDataStorerMockAddUploadedFile sync.RWMutex
	lockDataStorerMockChecker         sync.RWMutex
	lockDataStorerMockClose           sync.RWMutex
	lockDataStorerMockGetJob          sync.RWMutex
	lockDataStorerMockGetJobs         sync.RWMutex
	lockDataStorerMockUpdateJob       sync.RWMutex
	lockDataStorerMockUpdateJobState  sync.RWMutex
)

// Ensure, that DataStorerMock does implement datastore.DataStorer.
// If this is not the case, regenerate this file with moq.
var _ datastore.DataStorer = &DataStorerMock{}

// DataStorerMock is a mock implementation of datastore.DataStorer.
//
//     func TestSomethingThatUsesDataStorer(t *testing.T) {
//
//         // make and configure a mocked datastore.DataStorer
//         mockedDataStorer := &DataStorerMock{
//             AddJobFunc: func(importJob *models.Job) (*models.Job, error) {
// 	               panic("mock out the AddJob method")
//             },
//             AddUploadedFileFunc: func(jobID string, message *models.UploadedFile) error {
// 	               panic("mock out the AddUploadedFile method")
//             },
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(in1 context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetJobFunc: func(jobID string) (*models.Job, error) {
// 	               panic("mock out the GetJob method")
//             },
//             GetJobsFunc: func(filters []string) ([]models.Job, error) {
// 	               panic("mock out the GetJobs method")
//             },
//             UpdateJobFunc: func(jobID string, update *models.Job) error {
// 	               panic("mock out the UpdateJob method")
//             },
//             UpdateJobStateFunc: func(jobID string, state string) error {
// 	               panic("mock out the UpdateJobState method")
//             },
//         }
//
//         // use mockedDataStorer in code that requires datastore.DataStorer
//         // and then make assertions.
//
//     }
type DataStorerMock struct {
	// AddJobFunc mocks the AddJob method.
	AddJobFunc func(importJob *models.Job) (*models.Job, error)

	// AddUploadedFileFunc mocks the AddUploadedFile method.
	AddUploadedFileFunc func(jobID string, message *models.UploadedFile) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(in1 context.Context) error

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(jobID string) (*models.Job, error)

	// GetJobsFunc mocks the GetJobs method.
	GetJobsFunc func(filters []string) ([]models.Job, error)

	// UpdateJobFunc mocks the UpdateJob method.
	UpdateJobFunc func(jobID string, update *models.Job) error

	// UpdateJobStateFunc mocks the UpdateJobState method.
	UpdateJobStateFunc func(jobID string, state string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddJob holds details about calls to the AddJob method.
		AddJob []struct {
			// ImportJob is the importJob argument value.
			ImportJob *models.Job
		}
		// AddUploadedFile holds details about calls to the AddUploadedFile method.
		AddUploadedFile []struct {
			// JobID is the jobID argument value.
			JobID string
			// Message is the message argument value.
			Message *models.UploadedFile
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// JobID is the jobID argument value.
			JobID string
		}
		// GetJobs holds details about calls to the GetJobs method.
		GetJobs []struct {
			// Filters is the filters argument value.
			Filters []string
		}
		// UpdateJob holds details about calls to the UpdateJob method.
		UpdateJob []struct {
			// JobID is the jobID argument value.
			JobID string
			// Update is the update argument value.
			Update *models.Job
		}
		// UpdateJobState holds details about calls to the UpdateJobState method.
		UpdateJobState []struct {
			// JobID is the jobID argument value.
			JobID string
			// State is the state argument value.
			State string
		}
	}
}

// AddJob calls AddJobFunc.
func (mock *DataStorerMock) AddJob(importJob *models.Job) (*models.Job, error) {
	if mock.AddJobFunc == nil {
		panic("DataStorerMock.AddJobFunc: method is nil but DataStorer.AddJob was just called")
	}
	callInfo := struct {
		ImportJob *models.Job
	}{
		ImportJob: importJob,
	}
	lockDataStorerMockAddJob.Lock()
	mock.calls.AddJob = append(mock.calls.AddJob, callInfo)
	lockDataStorerMockAddJob.Unlock()
	return mock.AddJobFunc(importJob)
}

// AddJobCalls gets all the calls that were made to AddJob.
// Check the length with:
//     len(mockedDataStorer.AddJobCalls())
func (mock *DataStorerMock) AddJobCalls() []struct {
	ImportJob *models.Job
} {
	var calls []struct {
		ImportJob *models.Job
	}
	lockDataStorerMockAddJob.RLock()
	calls = mock.calls.AddJob
	lockDataStorerMockAddJob.RUnlock()
	return calls
}

// AddUploadedFile calls AddUploadedFileFunc.
func (mock *DataStorerMock) AddUploadedFile(jobID string, message *models.UploadedFile) error {
	if mock.AddUploadedFileFunc == nil {
		panic("DataStorerMock.AddUploadedFileFunc: method is nil but DataStorer.AddUploadedFile was just called")
	}
	callInfo := struct {
		JobID   string
		Message *models.UploadedFile
	}{
		JobID:   jobID,
		Message: message,
	}
	lockDataStorerMockAddUploadedFile.Lock()
	mock.calls.AddUploadedFile = append(mock.calls.AddUploadedFile, callInfo)
	lockDataStorerMockAddUploadedFile.Unlock()
	return mock.AddUploadedFileFunc(jobID, message)
}

// AddUploadedFileCalls gets all the calls that were made to AddUploadedFile.
// Check the length with:
//     len(mockedDataStorer.AddUploadedFileCalls())
func (mock *DataStorerMock) AddUploadedFileCalls() []struct {
	JobID   string
	Message *models.UploadedFile
} {
	var calls []struct {
		JobID   string
		Message *models.UploadedFile
	}
	lockDataStorerMockAddUploadedFile.RLock()
	calls = mock.calls.AddUploadedFile
	lockDataStorerMockAddUploadedFile.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *DataStorerMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DataStorerMock.CheckerFunc: method is nil but DataStorer.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	lockDataStorerMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockDataStorerMockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDataStorer.CheckerCalls())
func (mock *DataStorerMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	lockDataStorerMockChecker.RLock()
	calls = mock.calls.Checker
	lockDataStorerMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *DataStorerMock) Close(in1 context.Context) error {
	if mock.CloseFunc == nil {
		panic("DataStorerMock.CloseFunc: method is nil but DataStorer.Close was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockDataStorerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockDataStorerMockClose.Unlock()
	return mock.CloseFunc(in1)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedDataStorer.CloseCalls())
func (mock *DataStorerMock) CloseCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockDataStorerMockClose.RLock()
	calls = mock.calls.Close
	lockDataStorerMockClose.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *DataStorerMock) GetJob(jobID string) (*models.Job, error) {
	if mock.GetJobFunc == nil {
		panic("DataStorerMock.GetJobFunc: method is nil but DataStorer.GetJob was just called")
	}
	callInfo := struct {
		JobID string
	}{
		JobID: jobID,
	}
	lockDataStorerMockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	lockDataStorerMockGetJob.Unlock()
	return mock.GetJobFunc(jobID)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//     len(mockedDataStorer.GetJobCalls())
func (mock *DataStorerMock) GetJobCalls() []struct {
	JobID string
} {
	var calls []struct {
		JobID string
	}
	lockDataStorerMockGetJob.RLock()
	calls = mock.calls.GetJob
	lockDataStorerMockGetJob.RUnlock()
	return calls
}

// GetJobs calls GetJobsFunc.
func (mock *DataStorerMock) GetJobs(filters []string) ([]models.Job, error) {
	if mock.GetJobsFunc == nil {
		panic("DataStorerMock.GetJobsFunc: method is nil but DataStorer.GetJobs was just called")
	}
	callInfo := struct {
		Filters []string
	}{
		Filters: filters,
	}
	lockDataStorerMockGetJobs.Lock()
	mock.calls.GetJobs = append(mock.calls.GetJobs, callInfo)
	lockDataStorerMockGetJobs.Unlock()
	return mock.GetJobsFunc(filters)
}

// GetJobsCalls gets all the calls that were made to GetJobs.
// Check the length with:
//     len(mockedDataStorer.GetJobsCalls())
func (mock *DataStorerMock) GetJobsCalls() []struct {
	Filters []string
} {
	var calls []struct {
		Filters []string
	}
	lockDataStorerMockGetJobs.RLock()
	calls = mock.calls.GetJobs
	lockDataStorerMockGetJobs.RUnlock()
	return calls
}

// UpdateJob calls UpdateJobFunc.
func (mock *DataStorerMock) UpdateJob(jobID string, update *models.Job) error {
	if mock.UpdateJobFunc == nil {
		panic("DataStorerMock.UpdateJobFunc: method is nil but DataStorer.UpdateJob was just called")
	}
	callInfo := struct {
		JobID  string
		Update *models.Job
	}{
		JobID:  jobID,
		Update: update,
	}
	lockDataStorerMockUpdateJob.Lock()
	mock.calls.UpdateJob = append(mock.calls.UpdateJob, callInfo)
	lockDataStorerMockUpdateJob.Unlock()
	return mock.UpdateJobFunc(jobID, update)
}

// UpdateJobCalls gets all the calls that were made to UpdateJob.
// Check the length with:
//     len(mockedDataStorer.UpdateJobCalls())
func (mock *DataStorerMock) UpdateJobCalls() []struct {
	JobID  string
	Update *models.Job
} {
	var calls []struct {
		JobID  string
		Update *models.Job
	}
	lockDataStorerMockUpdateJob.RLock()
	calls = mock.calls.UpdateJob
	lockDataStorerMockUpdateJob.RUnlock()
	return calls
}

// UpdateJobStateCalls gets all the calls that were made to UpdateJobState.
// Check the length with:
//     len(mockedDataStorer.UpdateJobStateCalls())
func (mock *DataStorerMock) UpdateJobStateCalls() []struct {
	JobID string
	State string
} {
	var calls []struct {
		JobID string
		State string
	}
	lockDataStorerMockUpdateJobState.RLock()
	calls = mock.calls.UpdateJobState
	lockDataStorerMockUpdateJobState.RUnlock()
	return calls
}
