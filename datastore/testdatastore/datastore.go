// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package testdatastore

import (
	"github.com/ONSdigital/dp-import-api/models"
	"sync"
)

var (
	lockDataStorerMockAddJob                  sync.RWMutex
	lockDataStorerMockAddUploadedFile         sync.RWMutex
	lockDataStorerMockGetJob                  sync.RWMutex
	lockDataStorerMockGetJobs                 sync.RWMutex
	lockDataStorerMockUpdateInstanceState     sync.RWMutex
	lockDataStorerMockUpdateInstanceTaskState sync.RWMutex
	lockDataStorerMockUpdateJob               sync.RWMutex
	lockDataStorerMockUpdateJobState          sync.RWMutex
)

// DataStorerMock is a mock implementation of DataStorer.
//
//     func TestSomethingThatUsesDataStorer(t *testing.T) {
//
//         // make and configure a mocked DataStorer
//         mockedDataStorer := &DataStorerMock{
//             AddJobFunc: func(importJob *models.Job) (*models.Job, error) {
// 	               panic("TODO: mock out the AddJob method")
//             },
//             AddUploadedFileFunc: func(jobID string, message *models.UploadedFile) error {
// 	               panic("TODO: mock out the AddUploadedFile method")
//             },
//             GetJobFunc: func(jobID string) (*models.Job, error) {
// 	               panic("TODO: mock out the GetJob method")
//             },
//             GetJobsFunc: func(filters []string) ([]models.Job, error) {
// 	               panic("TODO: mock out the GetJobs method")
//             },
//             UpdateInstanceStateFunc: func(jobID string, instanceID string, taskID string, newState string) error {
// 	               panic("TODO: mock out the UpdateInstanceState method")
//             },
//             UpdateInstanceTaskStateFunc: func(jobID string, instanceID string, taskID string, newState string) error {
// 	               panic("TODO: mock out the UpdateInstanceTaskState method")
//             },
//             UpdateJobFunc: func(jobID string, update *models.Job) error {
// 	               panic("TODO: mock out the UpdateJob method")
//             },
//             UpdateJobStateFunc: func(jobID string, state string) error {
// 	               panic("TODO: mock out the UpdateJobState method")
//             },
//         }
//
//         // TODO: use mockedDataStorer in code that requires DataStorer
//         //       and then make assertions.
//
//     }
type DataStorerMock struct {
	// AddJobFunc mocks the AddJob method.
	AddJobFunc func(importJob *models.Job) (*models.Job, error)

	// AddUploadedFileFunc mocks the AddUploadedFile method.
	AddUploadedFileFunc func(jobID string, message *models.UploadedFile) error

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(jobID string) (*models.Job, error)

	// GetJobsFunc mocks the GetJobs method.
	GetJobsFunc func(filters []string) ([]models.Job, error)

	// UpdateInstanceStateFunc mocks the UpdateInstanceState method.
	UpdateInstanceStateFunc func(jobID string, instanceID string, taskID string, newState string) error

	// UpdateInstanceTaskStateFunc mocks the UpdateInstanceTaskState method.
	UpdateInstanceTaskStateFunc func(jobID string, instanceID string, taskID string, newState string) error

	// UpdateJobFunc mocks the UpdateJob method.
	UpdateJobFunc func(jobID string, update *models.Job) error

	// UpdateJobStateFunc mocks the UpdateJobState method.
	UpdateJobStateFunc func(jobID string, state string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddJob holds details about calls to the AddJob method.
		AddJob []struct {
			// ImportJob is the importJob argument value.
			ImportJob *models.Job
		}
		// AddUploadedFile holds details about calls to the AddUploadedFile method.
		AddUploadedFile []struct {
			// JobID is the jobID argument value.
			JobID string
			// Message is the message argument value.
			Message *models.UploadedFile
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// JobID is the jobID argument value.
			JobID string
		}
		// GetJobs holds details about calls to the GetJobs method.
		GetJobs []struct {
			// Filters is the filters argument value.
			Filters []string
		}
		// UpdateInstanceState holds details about calls to the UpdateInstanceState method.
		UpdateInstanceState []struct {
			// JobID is the jobID argument value.
			JobID string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// TaskID is the taskID argument value.
			TaskID string
			// NewState is the newState argument value.
			NewState string
		}
		// UpdateInstanceTaskState holds details about calls to the UpdateInstanceTaskState method.
		UpdateInstanceTaskState []struct {
			// JobID is the jobID argument value.
			JobID string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// TaskID is the taskID argument value.
			TaskID string
			// NewState is the newState argument value.
			NewState string
		}
		// UpdateJob holds details about calls to the UpdateJob method.
		UpdateJob []struct {
			// JobID is the jobID argument value.
			JobID string
			// Update is the update argument value.
			Update *models.Job
		}
		// UpdateJobState holds details about calls to the UpdateJobState method.
		UpdateJobState []struct {
			// JobID is the jobID argument value.
			JobID string
			// State is the state argument value.
			State string
		}
	}
}

// AddJob calls AddJobFunc.
func (mock *DataStorerMock) AddJob(importJob *models.Job) (*models.Job, error) {
	if mock.AddJobFunc == nil {
		panic("moq: DataStorerMock.AddJobFunc is nil but DataStorer.AddJob was just called")
	}
	callInfo := struct {
		ImportJob *models.Job
	}{
		ImportJob: importJob,
	}
	lockDataStorerMockAddJob.Lock()
	mock.calls.AddJob = append(mock.calls.AddJob, callInfo)
	lockDataStorerMockAddJob.Unlock()
	return mock.AddJobFunc(importJob)
}

// AddJobCalls gets all the calls that were made to AddJob.
// Check the length with:
//     len(mockedDataStorer.AddJobCalls())
func (mock *DataStorerMock) AddJobCalls() []struct {
	ImportJob *models.Job
} {
	var calls []struct {
		ImportJob *models.Job
	}
	lockDataStorerMockAddJob.RLock()
	calls = mock.calls.AddJob
	lockDataStorerMockAddJob.RUnlock()
	return calls
}

// AddUploadedFile calls AddUploadedFileFunc.
func (mock *DataStorerMock) AddUploadedFile(jobID string, message *models.UploadedFile) error {
	if mock.AddUploadedFileFunc == nil {
		panic("moq: DataStorerMock.AddUploadedFileFunc is nil but DataStorer.AddUploadedFile was just called")
	}
	callInfo := struct {
		JobID   string
		Message *models.UploadedFile
	}{
		JobID:   jobID,
		Message: message,
	}
	lockDataStorerMockAddUploadedFile.Lock()
	mock.calls.AddUploadedFile = append(mock.calls.AddUploadedFile, callInfo)
	lockDataStorerMockAddUploadedFile.Unlock()
	return mock.AddUploadedFileFunc(jobID, message)
}

// AddUploadedFileCalls gets all the calls that were made to AddUploadedFile.
// Check the length with:
//     len(mockedDataStorer.AddUploadedFileCalls())
func (mock *DataStorerMock) AddUploadedFileCalls() []struct {
	JobID   string
	Message *models.UploadedFile
} {
	var calls []struct {
		JobID   string
		Message *models.UploadedFile
	}
	lockDataStorerMockAddUploadedFile.RLock()
	calls = mock.calls.AddUploadedFile
	lockDataStorerMockAddUploadedFile.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *DataStorerMock) GetJob(jobID string) (*models.Job, error) {
	if mock.GetJobFunc == nil {
		panic("moq: DataStorerMock.GetJobFunc is nil but DataStorer.GetJob was just called")
	}
	callInfo := struct {
		JobID string
	}{
		JobID: jobID,
	}
	lockDataStorerMockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	lockDataStorerMockGetJob.Unlock()
	return mock.GetJobFunc(jobID)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//     len(mockedDataStorer.GetJobCalls())
func (mock *DataStorerMock) GetJobCalls() []struct {
	JobID string
} {
	var calls []struct {
		JobID string
	}
	lockDataStorerMockGetJob.RLock()
	calls = mock.calls.GetJob
	lockDataStorerMockGetJob.RUnlock()
	return calls
}

// GetJobs calls GetJobsFunc.
func (mock *DataStorerMock) GetJobs(filters []string) ([]models.Job, error) {
	if mock.GetJobsFunc == nil {
		panic("moq: DataStorerMock.GetJobsFunc is nil but DataStorer.GetJobs was just called")
	}
	callInfo := struct {
		Filters []string
	}{
		Filters: filters,
	}
	lockDataStorerMockGetJobs.Lock()
	mock.calls.GetJobs = append(mock.calls.GetJobs, callInfo)
	lockDataStorerMockGetJobs.Unlock()
	return mock.GetJobsFunc(filters)
}

// GetJobsCalls gets all the calls that were made to GetJobs.
// Check the length with:
//     len(mockedDataStorer.GetJobsCalls())
func (mock *DataStorerMock) GetJobsCalls() []struct {
	Filters []string
} {
	var calls []struct {
		Filters []string
	}
	lockDataStorerMockGetJobs.RLock()
	calls = mock.calls.GetJobs
	lockDataStorerMockGetJobs.RUnlock()
	return calls
}

// UpdateInstanceState calls UpdateInstanceStateFunc.
func (mock *DataStorerMock) UpdateInstanceState(jobID string, instanceID string, taskID string, newState string) error {
	if mock.UpdateInstanceStateFunc == nil {
		panic("moq: DataStorerMock.UpdateInstanceStateFunc is nil but DataStorer.UpdateInstanceState was just called")
	}
	callInfo := struct {
		JobID      string
		InstanceID string
		TaskID     string
		NewState   string
	}{
		JobID:      jobID,
		InstanceID: instanceID,
		TaskID:     taskID,
		NewState:   newState,
	}
	lockDataStorerMockUpdateInstanceState.Lock()
	mock.calls.UpdateInstanceState = append(mock.calls.UpdateInstanceState, callInfo)
	lockDataStorerMockUpdateInstanceState.Unlock()
	return mock.UpdateInstanceStateFunc(jobID, instanceID, taskID, newState)
}

// UpdateInstanceStateCalls gets all the calls that were made to UpdateInstanceState.
// Check the length with:
//     len(mockedDataStorer.UpdateInstanceStateCalls())
func (mock *DataStorerMock) UpdateInstanceStateCalls() []struct {
	JobID      string
	InstanceID string
	TaskID     string
	NewState   string
} {
	var calls []struct {
		JobID      string
		InstanceID string
		TaskID     string
		NewState   string
	}
	lockDataStorerMockUpdateInstanceState.RLock()
	calls = mock.calls.UpdateInstanceState
	lockDataStorerMockUpdateInstanceState.RUnlock()
	return calls
}

// UpdateInstanceTaskState calls UpdateInstanceTaskStateFunc.
func (mock *DataStorerMock) UpdateInstanceTaskState(jobID string, instanceID string, taskID string, newState string) error {
	if mock.UpdateInstanceTaskStateFunc == nil {
		panic("moq: DataStorerMock.UpdateInstanceTaskStateFunc is nil but DataStorer.UpdateInstanceTaskState was just called")
	}
	callInfo := struct {
		JobID      string
		InstanceID string
		TaskID     string
		NewState   string
	}{
		JobID:      jobID,
		InstanceID: instanceID,
		TaskID:     taskID,
		NewState:   newState,
	}
	lockDataStorerMockUpdateInstanceTaskState.Lock()
	mock.calls.UpdateInstanceTaskState = append(mock.calls.UpdateInstanceTaskState, callInfo)
	lockDataStorerMockUpdateInstanceTaskState.Unlock()
	return mock.UpdateInstanceTaskStateFunc(jobID, instanceID, taskID, newState)
}

// UpdateInstanceTaskStateCalls gets all the calls that were made to UpdateInstanceTaskState.
// Check the length with:
//     len(mockedDataStorer.UpdateInstanceTaskStateCalls())
func (mock *DataStorerMock) UpdateInstanceTaskStateCalls() []struct {
	JobID      string
	InstanceID string
	TaskID     string
	NewState   string
} {
	var calls []struct {
		JobID      string
		InstanceID string
		TaskID     string
		NewState   string
	}
	lockDataStorerMockUpdateInstanceTaskState.RLock()
	calls = mock.calls.UpdateInstanceTaskState
	lockDataStorerMockUpdateInstanceTaskState.RUnlock()
	return calls
}

// UpdateJob calls UpdateJobFunc.
func (mock *DataStorerMock) UpdateJob(jobID string, update *models.Job) error {
	if mock.UpdateJobFunc == nil {
		panic("moq: DataStorerMock.UpdateJobFunc is nil but DataStorer.UpdateJob was just called")
	}
	callInfo := struct {
		JobID  string
		Update *models.Job
	}{
		JobID:  jobID,
		Update: update,
	}
	lockDataStorerMockUpdateJob.Lock()
	mock.calls.UpdateJob = append(mock.calls.UpdateJob, callInfo)
	lockDataStorerMockUpdateJob.Unlock()
	return mock.UpdateJobFunc(jobID, update)
}

// UpdateJobCalls gets all the calls that were made to UpdateJob.
// Check the length with:
//     len(mockedDataStorer.UpdateJobCalls())
func (mock *DataStorerMock) UpdateJobCalls() []struct {
	JobID  string
	Update *models.Job
} {
	var calls []struct {
		JobID  string
		Update *models.Job
	}
	lockDataStorerMockUpdateJob.RLock()
	calls = mock.calls.UpdateJob
	lockDataStorerMockUpdateJob.RUnlock()
	return calls
}

// UpdateJobState calls UpdateJobStateFunc.
func (mock *DataStorerMock) UpdateJobState(jobID string, state string) error {
	if mock.UpdateJobStateFunc == nil {
		panic("moq: DataStorerMock.UpdateJobStateFunc is nil but DataStorer.UpdateJobState was just called")
	}
	callInfo := struct {
		JobID string
		State string
	}{
		JobID: jobID,
		State: state,
	}
	lockDataStorerMockUpdateJobState.Lock()
	mock.calls.UpdateJobState = append(mock.calls.UpdateJobState, callInfo)
	lockDataStorerMockUpdateJobState.Unlock()
	return mock.UpdateJobStateFunc(jobID, state)
}

// UpdateJobStateCalls gets all the calls that were made to UpdateJobState.
// Check the length with:
//     len(mockedDataStorer.UpdateJobStateCalls())
func (mock *DataStorerMock) UpdateJobStateCalls() []struct {
	JobID string
	State string
} {
	var calls []struct {
		JobID string
		State string
	}
	lockDataStorerMockUpdateJobState.RLock()
	calls = mock.calls.UpdateJobState
	lockDataStorerMockUpdateJobState.RUnlock()
	return calls
}
