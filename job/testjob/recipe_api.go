// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testjob

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/recipe"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-import-api/job"
	"sync"
)

var (
	lockRecipeAPIClientMockChecker   sync.RWMutex
	lockRecipeAPIClientMockGetRecipe sync.RWMutex
)

// Ensure, that RecipeAPIClientMock does implement job.RecipeAPIClient.
// If this is not the case, regenerate this file with moq.
var _ job.RecipeAPIClient = &RecipeAPIClientMock{}

// RecipeAPIClientMock is a mock implementation of job.RecipeAPIClient.
//
//     func TestSomethingThatUsesRecipeAPIClient(t *testing.T) {
//
//         // make and configure a mocked job.RecipeAPIClient
//         mockedRecipeAPIClient := &RecipeAPIClientMock{
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             GetRecipeFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, recipeID string) (*recipe.Recipe, error) {
// 	               panic("mock out the GetRecipe method")
//             },
//         }
//
//         // use mockedRecipeAPIClient in code that requires job.RecipeAPIClient
//         // and then make assertions.
//
//     }
type RecipeAPIClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// GetRecipeFunc mocks the GetRecipe method.
	GetRecipeFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, recipeID string) (*recipe.Recipe, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// GetRecipe holds details about calls to the GetRecipe method.
		GetRecipe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// RecipeID is the recipeID argument value.
			RecipeID string
		}
	}
}

// Checker calls CheckerFunc.
func (mock *RecipeAPIClientMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("RecipeAPIClientMock.CheckerFunc: method is nil but RecipeAPIClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockRecipeAPIClientMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockRecipeAPIClientMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedRecipeAPIClient.CheckerCalls())
func (mock *RecipeAPIClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockRecipeAPIClientMockChecker.RLock()
	calls = mock.calls.Checker
	lockRecipeAPIClientMockChecker.RUnlock()
	return calls
}

// GetRecipe calls GetRecipeFunc.
func (mock *RecipeAPIClientMock) GetRecipe(ctx context.Context, userAuthToken string, serviceAuthToken string, recipeID string) (*recipe.Recipe, error) {
	if mock.GetRecipeFunc == nil {
		panic("RecipeAPIClientMock.GetRecipeFunc: method is nil but RecipeAPIClient.GetRecipe was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		RecipeID         string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		RecipeID:         recipeID,
	}
	lockRecipeAPIClientMockGetRecipe.Lock()
	mock.calls.GetRecipe = append(mock.calls.GetRecipe, callInfo)
	lockRecipeAPIClientMockGetRecipe.Unlock()
	return mock.GetRecipeFunc(ctx, userAuthToken, serviceAuthToken, recipeID)
}

// GetRecipeCalls gets all the calls that were made to GetRecipe.
// Check the length with:
//     len(mockedRecipeAPIClient.GetRecipeCalls())
func (mock *RecipeAPIClientMock) GetRecipeCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	RecipeID         string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		RecipeID         string
	}
	lockRecipeAPIClientMockGetRecipe.RLock()
	calls = mock.calls.GetRecipe
	lockRecipeAPIClientMockGetRecipe.RUnlock()
	return calls
}
