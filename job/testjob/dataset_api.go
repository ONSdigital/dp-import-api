// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package testjob

import (
	"context"
	"github.com/ONSdigital/dp-import-api/models"
	"sync"
)

var (
	lockDatasetAPIMockCreateInstance      sync.RWMutex
	lockDatasetAPIMockUpdateInstanceState sync.RWMutex
)

// DatasetAPIMock is a mock implementation of DatasetAPI.
//
//     func TestSomethingThatUsesDatasetAPI(t *testing.T) {
//
//         // make and configure a mocked DatasetAPI
//         mockedDatasetAPI := &DatasetAPIMock{
//             CreateInstanceFunc: func(ctx context.Context, job *models.Job, recipeInst *models.RecipeInstance) (*models.Instance, error) {
// 	               panic("TODO: mock out the CreateInstance method")
//             },
//             UpdateInstanceStateFunc: func(ctx context.Context, instanceID string, newState string) error {
// 	               panic("TODO: mock out the UpdateInstanceState method")
//             },
//         }
//
//         // TODO: use mockedDatasetAPI in code that requires DatasetAPI
//         //       and then make assertions.
//
//     }
type DatasetAPIMock struct {
	// CreateInstanceFunc mocks the CreateInstance method.
	CreateInstanceFunc func(ctx context.Context, job *models.Job, recipeInst *models.RecipeInstance) (*models.Instance, error)

	// UpdateInstanceStateFunc mocks the UpdateInstanceState method.
	UpdateInstanceStateFunc func(ctx context.Context, instanceID string, newState string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateInstance holds details about calls to the CreateInstance method.
		CreateInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Job is the job argument value.
			Job *models.Job
			// RecipeInst is the recipeInst argument value.
			RecipeInst *models.RecipeInstance
		}
		// UpdateInstanceState holds details about calls to the UpdateInstanceState method.
		UpdateInstanceState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// NewState is the newState argument value.
			NewState string
		}
	}
}

// CreateInstance calls CreateInstanceFunc.
func (mock *DatasetAPIMock) CreateInstance(ctx context.Context, job *models.Job, recipeInst *models.RecipeInstance) (*models.Instance, error) {
	if mock.CreateInstanceFunc == nil {
		panic("moq: DatasetAPIMock.CreateInstanceFunc is nil but DatasetAPI.CreateInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Job        *models.Job
		RecipeInst *models.RecipeInstance
	}{
		Ctx:        ctx,
		Job:        job,
		RecipeInst: recipeInst,
	}
	lockDatasetAPIMockCreateInstance.Lock()
	mock.calls.CreateInstance = append(mock.calls.CreateInstance, callInfo)
	lockDatasetAPIMockCreateInstance.Unlock()
	return mock.CreateInstanceFunc(ctx, job, recipeInst)
}

// CreateInstanceCalls gets all the calls that were made to CreateInstance.
// Check the length with:
//     len(mockedDatasetAPI.CreateInstanceCalls())
func (mock *DatasetAPIMock) CreateInstanceCalls() []struct {
	Ctx        context.Context
	Job        *models.Job
	RecipeInst *models.RecipeInstance
} {
	var calls []struct {
		Ctx        context.Context
		Job        *models.Job
		RecipeInst *models.RecipeInstance
	}
	lockDatasetAPIMockCreateInstance.RLock()
	calls = mock.calls.CreateInstance
	lockDatasetAPIMockCreateInstance.RUnlock()
	return calls
}

// UpdateInstanceState calls UpdateInstanceStateFunc.
func (mock *DatasetAPIMock) UpdateInstanceState(ctx context.Context, instanceID string, newState string) error {
	if mock.UpdateInstanceStateFunc == nil {
		panic("moq: DatasetAPIMock.UpdateInstanceStateFunc is nil but DatasetAPI.UpdateInstanceState was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		NewState   string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		NewState:   newState,
	}
	lockDatasetAPIMockUpdateInstanceState.Lock()
	mock.calls.UpdateInstanceState = append(mock.calls.UpdateInstanceState, callInfo)
	lockDatasetAPIMockUpdateInstanceState.Unlock()
	return mock.UpdateInstanceStateFunc(ctx, instanceID, newState)
}

// UpdateInstanceStateCalls gets all the calls that were made to UpdateInstanceState.
// Check the length with:
//     len(mockedDatasetAPI.UpdateInstanceStateCalls())
func (mock *DatasetAPIMock) UpdateInstanceStateCalls() []struct {
	Ctx        context.Context
	InstanceID string
	NewState   string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		NewState   string
	}
	lockDatasetAPIMockUpdateInstanceState.RLock()
	calls = mock.calls.UpdateInstanceState
	lockDatasetAPIMockUpdateInstanceState.RUnlock()
	return calls
}
