// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testjob

import (
	"context"
	"github.com/ONSdigital/dp-import-api/job"
	"github.com/ONSdigital/dp-import-api/models"
	"sync"
)

var (
	lockQueueMockQueue sync.RWMutex
)

// Ensure, that QueueMock does implement Queue.
// If this is not the case, regenerate this file with moq.
var _ job.Queue = &QueueMock{}

// QueueMock is a mock implementation of job.Queue.
//
//     func TestSomethingThatUsesQueue(t *testing.T) {
//
//         // make and configure a mocked job.Queue
//         mockedQueue := &QueueMock{
//             QueueFunc: func(ctx context.Context, job *models.ImportData) error {
// 	               panic("mock out the Queue method")
//             },
//         }
//
//         // use mockedQueue in code that requires job.Queue
//         // and then make assertions.
//
//     }
type QueueMock struct {
	// QueueFunc mocks the Queue method.
	QueueFunc func(ctx context.Context, job *models.ImportData) error

	// calls tracks calls to the methods.
	calls struct {
		// Queue holds details about calls to the Queue method.
		Queue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Job is the job argument value.
			Job *models.ImportData
		}
	}
}

// Queue calls QueueFunc.
func (mock *QueueMock) Queue(ctx context.Context, job *models.ImportData) error {
	if mock.QueueFunc == nil {
		panic("QueueMock.QueueFunc: method is nil but Queue.Queue was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Job *models.ImportData
	}{
		Ctx: ctx,
		Job: job,
	}
	lockQueueMockQueue.Lock()
	mock.calls.Queue = append(mock.calls.Queue, callInfo)
	lockQueueMockQueue.Unlock()
	return mock.QueueFunc(ctx, job)
}

// QueueCalls gets all the calls that were made to Queue.
// Check the length with:
//     len(mockedQueue.QueueCalls())
func (mock *QueueMock) QueueCalls() []struct {
	Ctx context.Context
	Job *models.ImportData
} {
	var calls []struct {
		Ctx context.Context
		Job *models.ImportData
	}
	lockQueueMockQueue.RLock()
	calls = mock.calls.Queue
	lockQueueMockQueue.RUnlock()
	return calls
}
