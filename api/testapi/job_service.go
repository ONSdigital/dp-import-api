// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package testapi

import (
	"github.com/ONSdigital/dp-import-api/models"
	"sync"
)

var (
	lockJobServiceMockCreateJob sync.RWMutex
	lockJobServiceMockUpdateJob sync.RWMutex
)

// JobServiceMock is a mock implementation of JobService.
//
//     func TestSomethingThatUsesJobService(t *testing.T) {
//
//         // make and configure a mocked JobService
//         mockedJobService := &JobServiceMock{
//             CreateJobFunc: func(job *models.Job) (*models.Job, error) {
// 	               panic("TODO: mock out the CreateJob method")
//             },
//             UpdateJobFunc: func(jobID string, job *models.Job) error {
// 	               panic("TODO: mock out the UpdateJob method")
//             },
//         }
//
//         // TODO: use mockedJobService in code that requires JobService
//         //       and then make assertions.
//
//     }
type JobServiceMock struct {
	// CreateJobFunc mocks the CreateJob method.
	CreateJobFunc func(job *models.Job) (*models.Job, error)

	// UpdateJobFunc mocks the UpdateJob method.
	UpdateJobFunc func(jobID string, job *models.Job) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateJob holds details about calls to the CreateJob method.
		CreateJob []struct {
			// Job is the job argument value.
			Job *models.Job
		}
		// UpdateJob holds details about calls to the UpdateJob method.
		UpdateJob []struct {
			// JobID is the jobID argument value.
			JobID string
			// Job is the job argument value.
			Job *models.Job
		}
	}
}

// CreateJob calls CreateJobFunc.
func (mock *JobServiceMock) CreateJob(job *models.Job) (*models.Job, error) {
	if mock.CreateJobFunc == nil {
		panic("moq: JobServiceMock.CreateJobFunc is nil but JobService.CreateJob was just called")
	}
	callInfo := struct {
		Job *models.Job
	}{
		Job: job,
	}
	lockJobServiceMockCreateJob.Lock()
	mock.calls.CreateJob = append(mock.calls.CreateJob, callInfo)
	lockJobServiceMockCreateJob.Unlock()
	return mock.CreateJobFunc(job)
}

// CreateJobCalls gets all the calls that were made to CreateJob.
// Check the length with:
//     len(mockedJobService.CreateJobCalls())
func (mock *JobServiceMock) CreateJobCalls() []struct {
	Job *models.Job
} {
	var calls []struct {
		Job *models.Job
	}
	lockJobServiceMockCreateJob.RLock()
	calls = mock.calls.CreateJob
	lockJobServiceMockCreateJob.RUnlock()
	return calls
}

// UpdateJob calls UpdateJobFunc.
func (mock *JobServiceMock) UpdateJob(jobID string, job *models.Job) error {
	if mock.UpdateJobFunc == nil {
		panic("moq: JobServiceMock.UpdateJobFunc is nil but JobService.UpdateJob was just called")
	}
	callInfo := struct {
		JobID string
		Job   *models.Job
	}{
		JobID: jobID,
		Job:   job,
	}
	lockJobServiceMockUpdateJob.Lock()
	mock.calls.UpdateJob = append(mock.calls.UpdateJob, callInfo)
	lockJobServiceMockUpdateJob.Unlock()
	return mock.UpdateJobFunc(jobID, job)
}

// UpdateJobCalls gets all the calls that were made to UpdateJob.
// Check the length with:
//     len(mockedJobService.UpdateJobCalls())
func (mock *JobServiceMock) UpdateJobCalls() []struct {
	JobID string
	Job   *models.Job
} {
	var calls []struct {
		JobID string
		Job   *models.Job
	}
	lockJobServiceMockUpdateJob.RLock()
	calls = mock.calls.UpdateJob
	lockJobServiceMockUpdateJob.RUnlock()
	return calls
}
